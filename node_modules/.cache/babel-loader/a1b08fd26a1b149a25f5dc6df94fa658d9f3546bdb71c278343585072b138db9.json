{"ast":null,"code":"\"use client\";\n\n// src/useBaseQuery.ts\nimport _slicedToArray from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from \"react\";\nimport { notifyManager } from \"@tanstack/query-core\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useIsRestoring } from \"./isRestoring.js\";\nimport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary } from \"./errorBoundaryUtils.js\";\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from \"./suspense.js\";\nfunction useBaseQuery(options, Observer, queryClient) {\n  var client = useQueryClient(queryClient);\n  var isRestoring = useIsRestoring();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = client.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  ensureStaleTime(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  var _React$useState = React.useState(function () {\n      return new Observer(client, defaultedOptions);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    observer = _React$useState2[0];\n  var result = observer.getOptimisticResult(defaultedOptions);\n  React.useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    var unsubscribe = isRestoring ? function () {\n      return void 0;\n    } : observer.subscribe(notifyManager.batchCalls(onStoreChange));\n    observer.updateResult();\n    return unsubscribe;\n  }, [observer, isRestoring]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  React.useEffect(function () {\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]);\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  }\n  if (getHasError({\n    result: result,\n    errorResetBoundary: errorResetBoundary,\n    throwOnError: defaultedOptions.throwOnError,\n    query: observer.getCurrentQuery()\n  })) {\n    throw result.error;\n  }\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexport { useBaseQuery };","map":{"version":3,"names":["React","notifyManager","useQueryErrorResetBoundary","useQueryClient","useIsRestoring","ensurePreventErrorBoundaryRetry","getHasError","useClearResetErrorBoundary","ensureStaleTime","fetchOptimistic","shouldSuspend","useBaseQuery","options","Observer","queryClient","client","isRestoring","errorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","_React$useState","useState","_React$useState2","_slicedToArray","observer","result","getOptimisticResult","useSyncExternalStore","useCallback","onStoreChange","unsubscribe","subscribe","batchCalls","updateResult","getCurrentResult","useEffect","setOptions","listeners","throwOnError","query","getCurrentQuery","error","notifyOnChangeProps","trackResult"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from './suspense'\nimport type { UseBaseQueryOptions } from './types'\nimport type { QueryClient, QueryKey, QueryObserver } from '@tanstack/query-core'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n) {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"mappings":";;;;AACA,YAAYA,KAAA,MAAW;AAEvB,SAASC,aAAA,QAAqB;AAC9B,SAASC,0BAAA,QAAkC;AAC3C,SAASC,cAAA,QAAsB;AAC/B,SAASC,cAAA,QAAsB;AAC/B,SACEC,+BAAA,EACAC,WAAA,EACAC,0BAAA,QACK;AACP,SAASC,eAAA,EAAiBC,eAAA,EAAiBC,aAAA,QAAqB;AAIzD,SAASC,aAOdC,OAAA,EAOAC,QAAA,EACAC,WAAA,EACA;EACA,IAAMC,MAAA,GAASZ,cAAA,CAAeW,WAAW;EACzC,IAAME,WAAA,GAAcZ,cAAA,CAAe;EACnC,IAAMa,kBAAA,GAAqBf,0BAAA,CAA2B;EACtD,IAAMgB,gBAAA,GAAmBH,MAAA,CAAOI,mBAAA,CAAoBP,OAAO;EAG3DM,gBAAA,CAAiBE,kBAAA,GAAqBJ,WAAA,GAClC,gBACA;EAEJR,eAAA,CAAgBU,gBAAgB;EAChCb,+BAAA,CAAgCa,gBAAA,EAAkBD,kBAAkB;EAEpEV,0BAAA,CAA2BU,kBAAkB;EAE7C,IAAAI,eAAA,GAAyBrB,KAAA,CAAAsB,QAAA,CACvB;MAAA,OACE,IAAIT,QAAA,CACFE,MAAA,EACAG,gBACF;IAAA,CACJ;IAAAK,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IANOI,QAAQ,GAAAF,gBAAA;EAQf,IAAMG,MAAA,GAASD,QAAA,CAASE,mBAAA,CAAoBT,gBAAgB;EAEtDlB,KAAA,CAAA4B,oBAAA,CACE5B,KAAA,CAAA6B,WAAA,CACJ,UAACC,aAAA,EAAkB;IACjB,IAAMC,WAAA,GAAcf,WAAA,GAChB;MAAA,OAAM;IAAA,IACNS,QAAA,CAASO,SAAA,CAAU/B,aAAA,CAAcgC,UAAA,CAAWH,aAAa,CAAC;IAI9DL,QAAA,CAASS,YAAA,CAAa;IAEtB,OAAOH,WAAA;EACT,GACA,CAACN,QAAA,EAAUT,WAAW,CACxB,GACA;IAAA,OAAMS,QAAA,CAASU,gBAAA,CAAiB;EAAA,GAChC;IAAA,OAAMV,QAAA,CAASU,gBAAA,CAAiB;EAAA,CAClC;EAEMnC,KAAA,CAAAoC,SAAA,CAAU,YAAM;IAGpBX,QAAA,CAASY,UAAA,CAAWnB,gBAAA,EAAkB;MAAEoB,SAAA,EAAW;IAAM,CAAC;EAC5D,GAAG,CAACpB,gBAAA,EAAkBO,QAAQ,CAAC;EAG/B,IAAIf,aAAA,CAAcQ,gBAAA,EAAkBQ,MAAA,EAAQV,WAAW,GAAG;IACxD,MAAMP,eAAA,CAAgBS,gBAAA,EAAkBO,QAAA,EAAUR,kBAAkB;EACtE;EAGA,IACEX,WAAA,CAAY;IACVoB,MAAA,EAAAA,MAAA;IACAT,kBAAA,EAAAA,kBAAA;IACAsB,YAAA,EAAcrB,gBAAA,CAAiBqB,YAAA;IAC/BC,KAAA,EAAOf,QAAA,CAASgB,eAAA,CAAgB;EAClC,CAAC,GACD;IACA,MAAMf,MAAA,CAAOgB,KAAA;EACf;EAGA,OAAO,CAACxB,gBAAA,CAAiByB,mBAAA,GACrBlB,QAAA,CAASmB,WAAA,CAAYlB,MAAM,IAC3BA,MAAA;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}