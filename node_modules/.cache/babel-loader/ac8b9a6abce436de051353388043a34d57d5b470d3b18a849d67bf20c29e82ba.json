{"ast":null,"code":"// src/suspense.ts\nvar defaultThrowOnError = function defaultThrowOnError(_error, query) {\n  return typeof query.state.data === \"undefined\";\n};\nvar ensureStaleTime = function ensureStaleTime(defaultedOptions) {\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n};\nvar willFetch = function willFetch(result, isRestoring) {\n  return result.isLoading && result.isFetching && !isRestoring;\n};\nvar shouldSuspend = function shouldSuspend(defaultedOptions, result, isRestoring) {\n  return (defaultedOptions === null || defaultedOptions === void 0 ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);\n};\nvar fetchOptimistic = function fetchOptimistic(defaultedOptions, observer, errorResetBoundary) {\n  return observer.fetchOptimistic(defaultedOptions).catch(function () {\n    errorResetBoundary.clearReset();\n  });\n};\nexport { defaultThrowOnError, ensureStaleTime, fetchOptimistic, shouldSuspend, willFetch };","map":{"version":3,"names":["defaultThrowOnError","_error","query","state","data","ensureStaleTime","defaultedOptions","suspense","staleTime","willFetch","result","isRestoring","isLoading","isFetching","shouldSuspend","fetchOptimistic","observer","errorResetBoundary","catch","clearReset"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/react-query/src/suspense.ts"],"sourcesContent":["import type { DefaultError } from '@tanstack/query-core/src'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => typeof query.state.data === 'undefined'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n"],"mappings":";AAUO,IAAMA,mBAAA,GAAsB,SAAtBA,oBAMXC,MAAA,EACAC,KAAA;EAAA,OACG,OAAOA,KAAA,CAAMC,KAAA,CAAMC,IAAA,KAAS;AAAA;AAE1B,IAAMC,eAAA,GAAkB,SAAlBA,gBACXC,gBAAA,EACG;EACH,IAAIA,gBAAA,CAAiBC,QAAA,EAAU;IAG7B,IAAI,OAAOD,gBAAA,CAAiBE,SAAA,KAAc,UAAU;MAClDF,gBAAA,CAAiBE,SAAA,GAAY;IAC/B;EACF;AACF;AAEO,IAAMC,SAAA,GAAY,SAAZA,UACXC,MAAA,EACAC,WAAA;EAAA,OACGD,MAAA,CAAOE,SAAA,IAAaF,MAAA,CAAOG,UAAA,IAAc,CAACF,WAAA;AAAA;AAExC,IAAMG,aAAA,GAAgB,SAAhBA,cACXR,gBAAA,EAGAI,MAAA,EACAC,WAAA;EAAA,OACG,CAAAL,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA,CAAkBC,QAAA,KAAYE,SAAA,CAAUC,MAAA,EAAQC,WAAW;AAAA;AAEzD,IAAMI,eAAA,GAAkB,SAAlBA,gBAOXT,gBAAA,EAOAU,QAAA,EACAC,kBAAA;EAAA,OAEAD,QAAA,CAASD,eAAA,CAAgBT,gBAAgB,EAAEY,KAAA,CAAM,YAAM;IACrDD,kBAAA,CAAmBE,UAAA,CAAW;EAChC,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}