{"ast":null,"code":"\"use client\";\n\n// src/HydrationBoundary.tsx\nimport _toConsumableArray from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from \"react\";\nimport { hydrate } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nvar HydrationBoundary = function HydrationBoundary(_ref) {\n  var children = _ref.children,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    state = _ref.state,\n    queryClient = _ref.queryClient;\n  var client = useQueryClient(queryClient);\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hydrationQueue = _React$useState2[0],\n    setHydrationQueue = _React$useState2[1];\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options;\n  React.useMemo(function () {\n    if (state) {\n      if (typeof state !== \"object\") {\n        return;\n      }\n      var queryCache = client.getQueryCache();\n      var queries = state.queries || [];\n      var newQueries = [];\n      var existingQueries = [];\n      var _iterator = _createForOfIteratorHelper(queries),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var dehydratedQuery = _step.value;\n          var existingQuery = queryCache.get(dehydratedQuery.queryHash);\n          if (!existingQuery) {\n            newQueries.push(dehydratedQuery);\n          } else {\n            var hydrationIsNewer = dehydratedQuery.state.dataUpdatedAt > existingQuery.state.dataUpdatedAt;\n            var queryAlreadyQueued = hydrationQueue === null || hydrationQueue === void 0 ? void 0 : hydrationQueue.find(function (query) {\n              return query.queryHash === dehydratedQuery.queryHash;\n            });\n            if (hydrationIsNewer && (!queryAlreadyQueued || dehydratedQuery.state.dataUpdatedAt > queryAlreadyQueued.state.dataUpdatedAt)) {\n              existingQueries.push(dehydratedQuery);\n            }\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (newQueries.length > 0) {\n        hydrate(client, {\n          queries: newQueries\n        }, optionsRef.current);\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue(function (prev) {\n          return prev ? [].concat(_toConsumableArray(prev), existingQueries) : existingQueries;\n        });\n      }\n    }\n  }, [client, hydrationQueue, state]);\n  React.useEffect(function () {\n    if (hydrationQueue) {\n      hydrate(client, {\n        queries: hydrationQueue\n      }, optionsRef.current);\n      setHydrationQueue(void 0);\n    }\n  }, [client, hydrationQueue]);\n  return children;\n};\nexport { HydrationBoundary };","map":{"version":3,"names":["React","hydrate","useQueryClient","HydrationBoundary","_ref","children","_ref$options","options","state","queryClient","client","_React$useState","useState","_React$useState2","_slicedToArray","hydrationQueue","setHydrationQueue","optionsRef","useRef","current","useMemo","queryCache","getQueryCache","queries","newQueries","existingQueries","_iterator","_createForOfIteratorHelper","_step","_loop","dehydratedQuery","value","existingQuery","get","queryHash","push","hydrationIsNewer","dataUpdatedAt","queryAlreadyQueued","find","query","s","n","done","err","e","f","length","prev","concat","_toConsumableArray","useEffect"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/react-query/src/HydrationBoundary.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: Omit<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: Omit<HydrateOptions['defaultOptions'], 'mutations'>\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n            existingQuery.state.dataUpdatedAt\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}