{"ast":null,"code":"import _toConsumableArray from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _queryCache, _mutationCache, _defaultOptions, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline;\n// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = (_queryCache = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _queryDefaults = /*#__PURE__*/new WeakMap(), _mutationDefaults = /*#__PURE__*/new WeakMap(), _mountCount = /*#__PURE__*/new WeakMap(), _unsubscribeFocus = /*#__PURE__*/new WeakMap(), _unsubscribeOnline = /*#__PURE__*/new WeakMap(), /*#__PURE__*/function () {\n  function QueryClient() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, QueryClient);\n    _classPrivateFieldInitSpec(this, _queryCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _defaultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _queryDefaults, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationDefaults, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mountCount, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _unsubscribeFocus, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _unsubscribeOnline, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _queryCache, config.queryCache || new QueryCache());\n    _classPrivateFieldSet(this, _mutationCache, config.mutationCache || new MutationCache());\n    _classPrivateFieldSet(this, _defaultOptions, config.defaultOptions || {});\n    _classPrivateFieldSet(this, _queryDefaults, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(this, _mutationDefaults, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(this, _mountCount, 0);\n  }\n  _createClass(QueryClient, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this$mountCount,\n        _this$mountCount2,\n        _this = this;\n      _classPrivateFieldSet(this, _mountCount, (_this$mountCount = _classPrivateFieldGet(this, _mountCount), _this$mountCount2 = _this$mountCount++, _this$mountCount)), _this$mountCount2;\n      if (_classPrivateFieldGet(this, _mountCount) !== 1) return;\n      _classPrivateFieldSet(this, _unsubscribeFocus, focusManager.subscribe(function () {\n        if (focusManager.isFocused()) {\n          _this.resumePausedMutations();\n          _classPrivateFieldGet(_this, _queryCache).onFocus();\n        }\n      }));\n      _classPrivateFieldSet(this, _unsubscribeOnline, onlineManager.subscribe(function () {\n        if (onlineManager.isOnline()) {\n          _this.resumePausedMutations();\n          _classPrivateFieldGet(_this, _queryCache).onOnline();\n        }\n      }));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _this$mountCount3, _this$mountCount4, _classPrivateFieldGet2, _classPrivateFieldGet3;\n      _classPrivateFieldSet(this, _mountCount, (_this$mountCount3 = _classPrivateFieldGet(this, _mountCount), _this$mountCount4 = _this$mountCount3--, _this$mountCount3)), _this$mountCount4;\n      if (_classPrivateFieldGet(this, _mountCount) !== 0) return;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _unsubscribeFocus)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(this, _unsubscribeFocus, void 0);\n      (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _unsubscribeOnline)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.call(this);\n      _classPrivateFieldSet(this, _unsubscribeOnline, void 0);\n    }\n  }, {\n    key: \"isFetching\",\n    value: function isFetching(filters) {\n      return _classPrivateFieldGet(this, _queryCache).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        fetchStatus: \"fetching\"\n      })).length;\n    }\n  }, {\n    key: \"isMutating\",\n    value: function isMutating(filters) {\n      return _classPrivateFieldGet(this, _mutationCache).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        status: \"pending\"\n      })).length;\n    }\n  }, {\n    key: \"getQueryData\",\n    value: function getQueryData(queryKey) {\n      var _classPrivateFieldGet4;\n      return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _queryCache).find({\n        queryKey: queryKey\n      })) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.state.data;\n    }\n  }, {\n    key: \"ensureQueryData\",\n    value: function ensureQueryData(options) {\n      var cachedData = this.getQueryData(options.queryKey);\n      return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(options);\n    }\n  }, {\n    key: \"getQueriesData\",\n    value: function getQueriesData(filters) {\n      return this.getQueryCache().findAll(filters).map(function (_ref) {\n        var queryKey = _ref.queryKey,\n          state = _ref.state;\n        var data = state.data;\n        return [queryKey, data];\n      });\n    }\n  }, {\n    key: \"setQueryData\",\n    value: function setQueryData(queryKey, updater, options) {\n      var query = _classPrivateFieldGet(this, _queryCache).find({\n        queryKey: queryKey\n      });\n      var prevData = query === null || query === void 0 ? void 0 : query.state.data;\n      var data = functionalUpdate(updater, prevData);\n      if (typeof data === \"undefined\") {\n        return void 0;\n      }\n      var defaultedOptions = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions).setData(data, _objectSpread(_objectSpread({}, options), {}, {\n        manual: true\n      }));\n    }\n  }, {\n    key: \"setQueriesData\",\n    value: function setQueriesData(filters, updater, options) {\n      var _this2 = this;\n      return notifyManager.batch(function () {\n        return _this2.getQueryCache().findAll(filters).map(function (_ref2) {\n          var queryKey = _ref2.queryKey;\n          return [queryKey, _this2.setQueryData(queryKey, updater, options)];\n        });\n      });\n    }\n  }, {\n    key: \"getQueryState\",\n    value: function getQueryState(queryKey) {\n      var _classPrivateFieldGet5;\n      return (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _queryCache).find({\n        queryKey: queryKey\n      })) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.state;\n    }\n  }, {\n    key: \"removeQueries\",\n    value: function removeQueries(filters) {\n      var queryCache = _classPrivateFieldGet(this, _queryCache);\n      notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          queryCache.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"resetQueries\",\n    value: function resetQueries(filters, options) {\n      var _this3 = this;\n      var queryCache = _classPrivateFieldGet(this, _queryCache);\n      var refetchFilters = _objectSpread({\n        type: \"active\"\n      }, filters);\n      return notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          query.reset();\n        });\n        return _this3.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"cancelQueries\",\n    value: function cancelQueries() {\n      var _this4 = this;\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var defaultedCancelOptions = _objectSpread({\n        revert: true\n      }, cancelOptions);\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this4, _queryCache).findAll(filters).map(function (query) {\n          return query.cancel(defaultedCancelOptions);\n        });\n      });\n      return Promise.all(promises).then(noop).catch(noop);\n    }\n  }, {\n    key: \"invalidateQueries\",\n    value: function invalidateQueries() {\n      var _this5 = this;\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return notifyManager.batch(function () {\n        var _ref3, _filters$refetchType;\n        _classPrivateFieldGet(_this5, _queryCache).findAll(filters).forEach(function (query) {\n          query.invalidate();\n        });\n        if (filters.refetchType === \"none\") {\n          return Promise.resolve();\n        }\n        var refetchFilters = _objectSpread(_objectSpread({}, filters), {}, {\n          type: (_ref3 = (_filters$refetchType = filters.refetchType) !== null && _filters$refetchType !== void 0 ? _filters$refetchType : filters.type) !== null && _ref3 !== void 0 ? _ref3 : \"active\"\n        });\n        return _this5.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"refetchQueries\",\n    value: function refetchQueries() {\n      var _options$cancelRefetc,\n        _this6 = this;\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      var fetchOptions = _objectSpread(_objectSpread({}, options), {}, {\n        cancelRefetch: (_options$cancelRefetc = options === null || options === void 0 ? void 0 : options.cancelRefetch) !== null && _options$cancelRefetc !== void 0 ? _options$cancelRefetc : true\n      });\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this6, _queryCache).findAll(filters).filter(function (query) {\n          return !query.isDisabled();\n        }).map(function (query) {\n          var promise = query.fetch(void 0, fetchOptions);\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop);\n          }\n          return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n        });\n      });\n      return Promise.all(promises).then(noop);\n    }\n  }, {\n    key: \"fetchQuery\",\n    value: function fetchQuery(options) {\n      var defaultedOptions = this.defaultQueryOptions(options);\n      if (typeof defaultedOptions.retry === \"undefined\") {\n        defaultedOptions.retry = false;\n      }\n      var query = _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions);\n      return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n  }, {\n    key: \"prefetchQuery\",\n    value: function prefetchQuery(options) {\n      return this.fetchQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"fetchInfiniteQuery\",\n    value: function fetchInfiniteQuery(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.fetchQuery(options);\n    }\n  }, {\n    key: \"prefetchInfiniteQuery\",\n    value: function prefetchInfiniteQuery(options) {\n      return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      return _classPrivateFieldGet(this, _mutationCache).resumePausedMutations();\n    }\n  }, {\n    key: \"getQueryCache\",\n    value: function getQueryCache() {\n      return _classPrivateFieldGet(this, _queryCache);\n    }\n  }, {\n    key: \"getMutationCache\",\n    value: function getMutationCache() {\n      return _classPrivateFieldGet(this, _mutationCache);\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return _classPrivateFieldGet(this, _defaultOptions);\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      _classPrivateFieldSet(this, _defaultOptions, options);\n    }\n  }, {\n    key: \"setQueryDefaults\",\n    value: function setQueryDefaults(queryKey, options) {\n      _classPrivateFieldGet(this, _queryDefaults).set(hashKey(queryKey), {\n        queryKey: queryKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getQueryDefaults\",\n    value: function getQueryDefaults(queryKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(this, _queryDefaults).values());\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n          result = _objectSpread(_objectSpread({}, result), queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"setMutationDefaults\",\n    value: function setMutationDefaults(mutationKey, options) {\n      _classPrivateFieldGet(this, _mutationDefaults).set(hashKey(mutationKey), {\n        mutationKey: mutationKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getMutationDefaults\",\n    value: function getMutationDefaults(mutationKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(this, _mutationDefaults).values());\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n          result = _objectSpread(_objectSpread({}, result), queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"defaultQueryOptions\",\n    value: function defaultQueryOptions(options) {\n      if (options !== null && options !== void 0 && options._defaulted) {\n        return options;\n      }\n      var defaultedOptions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions).queries), (options === null || options === void 0 ? void 0 : options.queryKey) && this.getQueryDefaults(options.queryKey)), options), {}, {\n        _defaulted: true\n      });\n      if (!defaultedOptions.queryHash) {\n        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n      }\n      if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n      }\n      if (typeof defaultedOptions.throwOnError === \"undefined\") {\n        defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n      }\n      if (typeof defaultedOptions.networkMode === \"undefined\" && defaultedOptions.persister) {\n        defaultedOptions.networkMode = \"offlineFirst\";\n      }\n      return defaultedOptions;\n    }\n  }, {\n    key: \"defaultMutationOptions\",\n    value: function defaultMutationOptions(options) {\n      if (options !== null && options !== void 0 && options._defaulted) {\n        return options;\n      }\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions).mutations), (options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)), options), {}, {\n        _defaulted: true\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _queryCache).clear();\n      _classPrivateFieldGet(this, _mutationCache).clear();\n    }\n  }]);\n  return QueryClient;\n}());\nexport { QueryClient };","map":{"version":3,"names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","_queryCache","WeakMap","_mutationCache","_defaultOptions","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","config","arguments","length","undefined","_classCallCheck","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","queryCache","mutationCache","defaultOptions","Map","_createClass","key","mount","_this$mountCount","_this$mountCount2","_this","_classPrivateFieldGet","subscribe","isFocused","resumePausedMutations","onFocus","isOnline","onOnline","unmount","_this$mountCount3","_this$mountCount4","_classPrivateFieldGet2","_classPrivateFieldGet3","call","isFetching","filters","findAll","_objectSpread","fetchStatus","isMutating","status","getQueryData","queryKey","_classPrivateFieldGet4","find","state","data","ensureQueryData","options","cachedData","Promise","resolve","fetchQuery","getQueriesData","getQueryCache","map","_ref","setQueryData","updater","query","prevData","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","_this2","batch","_ref2","getQueryState","_classPrivateFieldGet5","removeQueries","forEach","remove","resetQueries","_this3","refetchFilters","type","reset","refetchQueries","cancelQueries","_this4","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","_this5","_ref3","_filters$refetchType","invalidate","refetchType","_options$cancelRefetc","_this6","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","_toConsumableArray","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","refetchOnReconnect","networkMode","suspense","persister","defaultMutationOptions","mutations","clear"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    return this.#queryCache.find({ queryKey })?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(options)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.getQueryCache()\n      .findAll(filters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const query = this.#queryCache.find<TInferredQueryFnData>({ queryKey })\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = DefaultError>(\n    queryKey: QueryKey,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.#queryCache.find<TQueryFnData, TError>({ queryKey })?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.#mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      Omit<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: QueryObserverOptions<any, any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: Omit<MutationObserverOptions<any, any, any, any>, 'mutationKey'>,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options?:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.throwOnError === 'undefined') {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (\n      typeof defaultedOptions.networkMode === 'undefined' &&\n      defaultedOptions.persister\n    ) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}