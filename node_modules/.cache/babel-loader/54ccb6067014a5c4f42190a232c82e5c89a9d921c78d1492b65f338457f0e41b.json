{"ast":null,"code":"import _classCallCheck from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateMethodGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldSet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _client, _result, _queries, _observers, _options, _combinedResult, _setResult, _combineResult, _findMatchingObservers, _onUpdate, _notify;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(function (x) {\n    return !array2.includes(x);\n  });\n}\nfunction replaceAt(array, index, value) {\n  var copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _options = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _setResult = /*#__PURE__*/new WeakSet(), _combineResult = /*#__PURE__*/new WeakSet(), _findMatchingObservers = /*#__PURE__*/new WeakSet(), _onUpdate = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n  var _super = _createSuper(QueriesObserver);\n  function QueriesObserver(client, _queries2, _options2) {\n    var _this;\n    _classCallCheck(this, QueriesObserver);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _notify);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _onUpdate);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _findMatchingObservers);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _combineResult);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _setResult);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _client, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _result, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _queries, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _observers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _options, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _combinedResult, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _client, client);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _queries, []);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _observers, []);\n    _classPrivateMethodGet(_assertThisInitialized(_this), _setResult, _setResult2).call(_assertThisInitialized(_this), []);\n    _this.setQueries(_queries2, _options2);\n    return _this;\n  }\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _classPrivateMethodGet(_this2, _onUpdate, _onUpdate2).call(_this2, observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.size) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n      _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, options, notifyOptions) {\n      var _this3 = this;\n      _classPrivateFieldSet(this, _queries, queries);\n      _classPrivateFieldSet(this, _options, options);\n      notifyManager.batch(function () {\n        var prevObservers = _classPrivateFieldGet(_this3, _observers);\n        var newObserverMatches = _classPrivateMethodGet(_this3, _findMatchingObservers, _findMatchingObservers2).call(_this3, _classPrivateFieldGet(_this3, _queries));\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n        _classPrivateFieldSet(_this3, _observers, newObservers);\n        _classPrivateMethodGet(_this3, _setResult, _setResult2).call(_this3, newResult);\n        if (!_this3.hasListeners()) {\n          return;\n        }\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _classPrivateMethodGet(_this3, _onUpdate, _onUpdate2).call(_this3, observer, result);\n          });\n        });\n        _classPrivateMethodGet(_this3, _notify, _notify2).call(_this3);\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(this, _combinedResult);\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return _classPrivateFieldGet(this, _observers).map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return _classPrivateFieldGet(this, _observers);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries) {\n      var _this4 = this;\n      var matches = _classPrivateMethodGet(this, _findMatchingObservers, _findMatchingObservers2).call(this, queries);\n      var result = matches.map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n      return [result, function (r) {\n        return _classPrivateMethodGet(_this4, _combineResult, _combineResult2).call(_this4, r !== null && r !== void 0 ? r : result);\n      }, function () {\n        return matches.map(function (match, index) {\n          var observerResult = result[index];\n          return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult) : observerResult;\n        });\n      }];\n    }\n  }]);\n  return QueriesObserver;\n}(Subscribable));\nfunction _setResult2(value) {\n  _classPrivateFieldSet(this, _result, value);\n  _classPrivateFieldSet(this, _combinedResult, _classPrivateMethodGet(this, _combineResult, _combineResult2).call(this, value));\n}\nfunction _combineResult2(input) {\n  var _classPrivateFieldGet2;\n  var combine = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _options)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.combine;\n  if (combine) {\n    return replaceEqualDeep(_classPrivateFieldGet(this, _combinedResult), combine(input));\n  }\n  return input;\n}\nfunction _findMatchingObservers2(queries) {\n  var _this5 = this;\n  var prevObservers = _classPrivateFieldGet(this, _observers);\n  var prevObserversMap = new Map(prevObservers.map(function (observer) {\n    return [observer.options.queryHash, observer];\n  }));\n  var defaultedQueryOptions = queries.map(function (options) {\n    return _classPrivateFieldGet(_this5, _client).defaultQueryOptions(options);\n  });\n  var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n    var match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match != null) {\n      return [{\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      }];\n    }\n    return [];\n  });\n  var matchedQueryHashes = new Set(matchingObservers.map(function (match) {\n    return match.defaultedQueryOptions.queryHash;\n  }));\n  var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n    return !matchedQueryHashes.has(defaultedOptions.queryHash);\n  });\n  var getObserver = function getObserver(options) {\n    var defaultedOptions = _classPrivateFieldGet(_this5, _client).defaultQueryOptions(options);\n    var currentObserver = _classPrivateFieldGet(_this5, _observers).find(function (o) {\n      return o.options.queryHash === defaultedOptions.queryHash;\n    });\n    return currentObserver !== null && currentObserver !== void 0 ? currentObserver : new QueryObserver(_classPrivateFieldGet(_this5, _client), defaultedOptions);\n  };\n  var newOrReusedObservers = unmatchedQueries.map(function (options) {\n    return {\n      defaultedQueryOptions: options,\n      observer: getObserver(options)\n    };\n  });\n  var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n    return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n  };\n  return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n}\nfunction _onUpdate2(observer, result) {\n  var index = _classPrivateFieldGet(this, _observers).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateMethodGet(this, _setResult, _setResult2).call(this, replaceAt(_classPrivateFieldGet(this, _result), index, result));\n    _classPrivateMethodGet(this, _notify, _notify2).call(this);\n  }\n}\nfunction _notify2() {\n  var _this6 = this;\n  notifyManager.batch(function () {\n    _this6.listeners.forEach(function (listener) {\n      listener(_classPrivateFieldGet(_this6, _result));\n    });\n  });\n}\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","_client","WeakMap","_result","_queries","_observers","_options","_combinedResult","_setResult","WeakSet","_combineResult","_findMatchingObservers","_onUpdate","_notify","_Subscribable","_inherits","_super","_createSuper","client","queries","options","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_classPrivateMethodGet","_setResult2","setQueries","_createClass","key","onSubscribe","_this2","listeners","size","_classPrivateFieldGet","forEach","observer","subscribe","result","_onUpdate2","onUnsubscribe","destroy","Set","notifyOptions","_this3","batch","prevObservers","newObserverMatches","_findMatchingObservers2","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","_notify2","getQueries","getCurrentQuery","getObservers","getOptimisticResult","_this4","matches","r","_combineResult2","observerResult","notifyOnChangeProps","trackResult","input","_classPrivateFieldGet2","combine","_this5","prevObserversMap","Map","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","_this6","listener"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/query-core/src/queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: (result: Array<QueryObserverResult>) => TCombinedResult\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult)\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(input: Array<QueryObserverResult>): TCombinedResult {\n    const combine = this.#options?.combine\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAA,QAAqB;AAC9B,SAASC,aAAA,QAAqB;AAC9B,SAASC,YAAA,QAAoB;AAC7B,SAASC,gBAAA,QAAwB;AASjC,SAASC,WAAcC,MAAA,EAAkBC,MAAA,EAA4B;EACnE,OAAOD,MAAA,CAAOE,MAAA,CAAO,UAACC,CAAA;IAAA,OAAM,CAACF,MAAA,CAAOG,QAAA,CAASD,CAAC,CAAC;EAAA;AACjD;AAEA,SAASE,UAAaC,KAAA,EAAiBC,KAAA,EAAeC,KAAA,EAAoB;EACxE,IAAMC,IAAA,GAAOH,KAAA,CAAMI,KAAA,CAAM,CAAC;EAC1BD,IAAA,CAAKF,KAAK,IAAIC,KAAA;EACd,OAAOC,IAAA;AACT;AAUO,IAAME,eAAA,IAAAC,OAAA,oBAAAC,OAAA,IAAAC,OAAA,oBAAAD,OAAA,IAAAE,QAAA,oBAAAF,OAAA,IAAAG,UAAA,oBAAAH,OAAA,IAAAI,QAAA,oBAAAJ,OAAA,IAAAK,eAAA,oBAAAL,OAAA,IAAAM,UAAA,oBAAAC,OAAA,IAAAC,cAAA,oBAAAD,OAAA,IAAAE,sBAAA,oBAAAF,OAAA,IAAAG,SAAA,oBAAAH,OAAA,IAAAI,OAAA,oBAAAJ,OAAA,2BAAAK,aAAA;EAAAC,SAAA,CAAAf,eAAA,EAAAc,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAjB,eAAA;EAUX,SAAAA,gBACEkB,MAAA,EACAC,SAAA,EACAC,SAAA,EACA;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAtB,eAAA;IACAqB,KAAA,GAAAL,MAAA,CAAAO,IAAA;IAAMC,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAR,OAAA;IAAAW,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAT,SAAA;IAAAY,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAV,sBAAA;IAAAa,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAX,cAAA;IAAAc,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAb,UAAA;IAAAkB,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAApB,OAAA;MAAA0B,QAAA;MAAA9B,KAAA;IAAA;IAAA6B,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAAlB,OAAA;MAAAwB,QAAA;MAAA9B,KAAA;IAAA;IAAA6B,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAAjB,QAAA;MAAAuB,QAAA;MAAA9B,KAAA;IAAA;IAAA6B,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAAhB,UAAA;MAAAsB,QAAA;MAAA9B,KAAA;IAAA;IAAA6B,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAAf,QAAA;MAAAqB,QAAA;MAAA9B,KAAA;IAAA;IAAA6B,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAAd,eAAA;MAAAoB,QAAA;MAAA9B,KAAA;IAAA;IAEN+B,qBAAA,CAAAH,sBAAA,CAAAJ,KAAA,GAAApB,OAAA,EAAeiB,MAAA;IACfU,qBAAA,CAAAH,sBAAA,CAAAJ,KAAA,GAAAjB,QAAA,EAAgB,EAAC;IACjBwB,qBAAA,CAAAH,sBAAA,CAAAJ,KAAA,GAAAhB,UAAA,EAAkB,EAAC;IAEnBwB,sBAAA,CAAAJ,sBAAA,CAAAJ,KAAA,GAAAb,UAAA,EAAAsB,WAAA,EAAAP,IAAA,CAAAE,sBAAA,CAAAJ,KAAA,GAAgB,EAAE;IAClBA,KAAA,CAAKU,UAAA,CAAWZ,SAAA,EAASC,SAAO;IAAA,OAAAC,KAAA;EAClC;EAAAW,YAAA,CAAAhC,eAAA;IAAAiC,GAAA;IAAApC,KAAA,EAOU,SAAAqC,YAAA,EAAoB;MAAA,IAAAC,MAAA;MAC5B,IAAI,KAAKC,SAAA,CAAUC,IAAA,KAAS,GAAG;QAC7BC,qBAAA,OAAAjC,UAAA,EAAgBkC,OAAA,CAAQ,UAACC,QAAA,EAAa;UACpCA,QAAA,CAASC,SAAA,CAAU,UAACC,MAAA,EAAW;YAC7Bb,sBAAA,CAAAM,MAAA,EAAAvB,SAAA,EAAA+B,UAAA,EAAApB,IAAA,CAAAY,MAAA,EAAeK,QAAA,EAAUE,MAAM;UACjC,CAAC;QACH,CAAC;MACH;IACF;EAAA;IAAAT,GAAA;IAAApC,KAAA,EAEU,SAAA+C,cAAA,EAAsB;MAC9B,IAAI,CAAC,KAAKR,SAAA,CAAUC,IAAA,EAAM;QACxB,KAAKQ,OAAA,CAAQ;MACf;IACF;EAAA;IAAAZ,GAAA;IAAApC,KAAA,EAEA,SAAAgD,QAAA,EAAgB;MACd,KAAKT,SAAA,GAAY,mBAAIU,GAAA,CAAI;MACzBR,qBAAA,OAAAjC,UAAA,EAAgBkC,OAAA,CAAQ,UAACC,QAAA,EAAa;QACpCA,QAAA,CAASK,OAAA,CAAQ;MACnB,CAAC;IACH;EAAA;IAAAZ,GAAA;IAAApC,KAAA,EAEA,SAAAkC,WACEZ,OAAA,EACAC,OAAA,EACA2B,aAAA,EACM;MAAA,IAAAC,MAAA;MACNpB,qBAAA,OAAAxB,QAAA,EAAgBe,OAAA;MAChBS,qBAAA,OAAAtB,QAAA,EAAgBc,OAAA;MAEhBpC,aAAA,CAAciE,KAAA,CAAM,YAAM;QACxB,IAAMC,aAAA,GAAAZ,qBAAA,CAAgBU,MAAA,EAAA3C,UAAA,CAAK;QAE3B,IAAM8C,kBAAA,GAAAtB,sBAAA,CAAqBmB,MAAA,EAAArC,sBAAA,EAAAyC,uBAAA,EAAA7B,IAAA,CAAAyB,MAAA,EAAAV,qBAAA,CAA4BU,MAAA,EAAA5C,QAAA,EAAa;QAGpE+C,kBAAA,CAAmBZ,OAAA,CAAQ,UAACc,KAAA;UAAA,OAC1BA,KAAA,CAAMb,QAAA,CAASc,UAAA,CAAWD,KAAA,CAAME,qBAAA,EAAuBR,aAAa;QAAA,CACtE;QAEA,IAAMS,YAAA,GAAeL,kBAAA,CAAmBM,GAAA,CAAI,UAACJ,KAAA;UAAA,OAAUA,KAAA,CAAMb,QAAQ;QAAA;QACrE,IAAMkB,SAAA,GAAYF,YAAA,CAAaC,GAAA,CAAI,UAACjB,QAAA;UAAA,OAClCA,QAAA,CAASmB,gBAAA,CAAiB;QAAA,CAC5B;QAEA,IAAMC,cAAA,GAAiBJ,YAAA,CAAaK,IAAA,CAClC,UAACrB,QAAA,EAAU5C,KAAA;UAAA,OAAU4C,QAAA,KAAaU,aAAA,CAActD,KAAK;QAAA,CACvD;QACA,IAAIsD,aAAA,CAAcY,MAAA,KAAWN,YAAA,CAAaM,MAAA,IAAU,CAACF,cAAA,EAAgB;UACnE;QACF;QAEAhC,qBAAA,CAAAoB,MAAA,EAAA3C,UAAA,EAAkBmD,YAAA;QAClB3B,sBAAA,CAAAmB,MAAA,EAAAxC,UAAA,EAAAsB,WAAA,EAAAP,IAAA,CAAAyB,MAAA,EAAgBU,SAAS;QAEzB,IAAI,CAACV,MAAA,CAAKe,YAAA,CAAa,GAAG;UACxB;QACF;QAEA3E,UAAA,CAAW8D,aAAA,EAAeM,YAAY,EAAEjB,OAAA,CAAQ,UAACC,QAAA,EAAa;UAC5DA,QAAA,CAASK,OAAA,CAAQ;QACnB,CAAC;QAEDzD,UAAA,CAAWoE,YAAA,EAAcN,aAAa,EAAEX,OAAA,CAAQ,UAACC,QAAA,EAAa;UAC5DA,QAAA,CAASC,SAAA,CAAU,UAACC,MAAA,EAAW;YAC7Bb,sBAAA,CAAAmB,MAAA,EAAApC,SAAA,EAAA+B,UAAA,EAAApB,IAAA,CAAAyB,MAAA,EAAeR,QAAA,EAAUE,MAAM;UACjC,CAAC;QACH,CAAC;QAEDb,sBAAA,CAAAmB,MAAA,EAAAnC,OAAA,EAAAmD,QAAA,EAAAzC,IAAA,CAAAyB,MAAA;MACF,CAAC;IACH;EAAA;IAAAf,GAAA;IAAApC,KAAA,EAEA,SAAA8D,iBAAA,EAAoC;MAClC,OAAArB,qBAAA,CAAO,MAAA/B,eAAA;IACT;EAAA;IAAA0B,GAAA;IAAApC,KAAA,EAEA,SAAAoE,WAAA,EAAa;MACX,OAAO3B,qBAAA,OAAAjC,UAAA,EAAgBoD,GAAA,CAAI,UAACjB,QAAA;QAAA,OAAaA,QAAA,CAAS0B,eAAA,CAAgB,CAAC;MAAA;IACrE;EAAA;IAAAjC,GAAA;IAAApC,KAAA,EAEA,SAAAsE,aAAA,EAAe;MACb,OAAA7B,qBAAA,CAAO,MAAAjC,UAAA;IACT;EAAA;IAAA4B,GAAA;IAAApC,KAAA,EAEA,SAAAuE,oBACEjD,OAAA,EAKA;MAAA,IAAAkD,MAAA;MACA,IAAMC,OAAA,GAAAzC,sBAAA,CAAU,MAAAlB,sBAAA,EAAAyC,uBAAA,EAAA7B,IAAA,OAA4BJ,OAAO;MACnD,IAAMuB,MAAA,GAAS4B,OAAA,CAAQb,GAAA,CAAI,UAACJ,KAAA;QAAA,OAC1BA,KAAA,CAAMb,QAAA,CAAS4B,mBAAA,CAAoBf,KAAA,CAAME,qBAAqB;MAAA,CAChE;MAEA,OAAO,CACLb,MAAA,EACA,UAAC6B,CAAA,EAAmC;QAClC,OAAA1C,sBAAA,CAAOwC,MAAA,EAAA3D,cAAA,EAAA8D,eAAA,EAAAjD,IAAA,CAAA8C,MAAA,EAAoBE,CAAA,aAAAA,CAAA,cAAAA,CAAA,GAAK7B,MAAM;MACxC,GACA,YAAM;QACJ,OAAO4B,OAAA,CAAQb,GAAA,CAAI,UAACJ,KAAA,EAAOzD,KAAA,EAAU;UACnC,IAAM6E,cAAA,GAAiB/B,MAAA,CAAO9C,KAAK;UACnC,OAAO,CAACyD,KAAA,CAAME,qBAAA,CAAsBmB,mBAAA,GAChCrB,KAAA,CAAMb,QAAA,CAASmC,WAAA,CAAYF,cAAc,IACzCA,cAAA;QACN,CAAC;MACH,EACF;IACF;EAAA;EAAA,OAAAzE,eAAA;AAAA,EA5IQd,YAAA,EA+NV;AAAA,SAAA4C,YAxMajC,KAAA,EAAmC;EAC5C+B,qBAAA,OAAAzB,OAAA,EAAeN,KAAA;EACf+B,qBAAA,OAAArB,eAAA,EAAAsB,sBAAA,CAAuB,MAAAnB,cAAA,EAAA8D,eAAA,EAAAjD,IAAA,OAAoB1B,KAAK;AAClD;AAAA,SAAA2E,gBAoHeI,KAAA,EAAoD;EAAA,IAAAC,sBAAA;EACjE,IAAMC,OAAA,IAAAD,sBAAA,GAAAvC,qBAAA,CAAU,MAAAhC,QAAA,eAAAuE,sBAAA,uBAAAA,sBAAA,CAAeC,OAAA;EAC/B,IAAIA,OAAA,EAAS;IACX,OAAO3F,gBAAA,CAAAmD,qBAAA,CAAiB,MAAA/B,eAAA,GAAsBuE,OAAA,CAAQF,KAAK,CAAC;EAC9D;EACA,OAAOA,KAAA;AACT;AAAA,SAAAxB,wBAGEjC,OAAA,EAC2B;EAAA,IAAA4D,MAAA;EAC3B,IAAM7B,aAAA,GAAAZ,qBAAA,CAAgB,MAAAjC,UAAA,CAAK;EAC3B,IAAM2E,gBAAA,GAAmB,IAAIC,GAAA,CAC3B/B,aAAA,CAAcO,GAAA,CAAI,UAACjB,QAAA;IAAA,OAAa,CAACA,QAAA,CAASpB,OAAA,CAAQ8D,SAAA,EAAW1C,QAAQ,CAAC;EAAA,EACxE;EAEA,IAAMe,qBAAA,GAAwBpC,OAAA,CAAQsC,GAAA,CAAI,UAACrC,OAAA;IAAA,OACzCkB,qBAAA,CAAAyC,MAAA,EAAA9E,OAAA,EAAakF,mBAAA,CAAoB/D,OAAO;EAAA,CAC1C;EAEA,IAAMgE,iBAAA,GACJ7B,qBAAA,CAAsB8B,OAAA,CAAQ,UAACC,gBAAA,EAAqB;IAClD,IAAMjC,KAAA,GAAQ2B,gBAAA,CAAiBO,GAAA,CAAID,gBAAA,CAAiBJ,SAAS;IAC7D,IAAI7B,KAAA,IAAS,MAAM;MACjB,OAAO,CAAC;QAAEE,qBAAA,EAAuB+B,gBAAA;QAAkB9C,QAAA,EAAUa;MAAM,CAAC;IACtE;IACA,OAAO,EAAC;EACV,CAAC;EAEH,IAAMmC,kBAAA,GAAqB,IAAI1C,GAAA,CAC7BsC,iBAAA,CAAkB3B,GAAA,CAAI,UAACJ,KAAA;IAAA,OAAUA,KAAA,CAAME,qBAAA,CAAsB2B,SAAS;EAAA,EACxE;EACA,IAAMO,gBAAA,GAAmBlC,qBAAA,CAAsBhE,MAAA,CAC7C,UAAC+F,gBAAA;IAAA,OAAqB,CAACE,kBAAA,CAAmBE,GAAA,CAAIJ,gBAAA,CAAiBJ,SAAS;EAAA,CAC1E;EAEA,IAAMS,WAAA,GAAc,SAAdA,YAAevE,OAAA,EAAiD;IACpE,IAAMkE,gBAAA,GAAmBhD,qBAAA,CAAAyC,MAAA,EAAA9E,OAAA,EAAakF,mBAAA,CAAoB/D,OAAO;IACjE,IAAMwE,eAAA,GAAkBtD,qBAAA,CAAAyC,MAAA,EAAA1E,UAAA,EAAgBwF,IAAA,CACtC,UAACC,CAAA;MAAA,OAAMA,CAAA,CAAE1E,OAAA,CAAQ8D,SAAA,KAAcI,gBAAA,CAAiBJ,SAAA;IAAA,CAClD;IACA,OACEU,eAAA,aAAAA,eAAA,cAAAA,eAAA,GAAmB,IAAI3G,aAAA,CAAAqD,qBAAA,CAAcyC,MAAA,EAAA9E,OAAA,GAAcqF,gBAAgB;EAEvE;EAEA,IAAMS,oBAAA,GACJN,gBAAA,CAAiBhC,GAAA,CAAI,UAACrC,OAAA,EAAY;IAChC,OAAO;MACLmC,qBAAA,EAAuBnC,OAAA;MACvBoB,QAAA,EAAUmD,WAAA,CAAYvE,OAAO;IAC/B;EACF,CAAC;EAEH,IAAM4E,2BAAA,GAA8B,SAA9BA,4BACJC,CAAA,EACAC,CAAA;IAAA,OAEA3C,qBAAA,CAAsB4C,OAAA,CAAQF,CAAA,CAAE1C,qBAAqB,IACrDA,qBAAA,CAAsB4C,OAAA,CAAQD,CAAA,CAAE3C,qBAAqB;EAAA;EAEvD,OAAO6B,iBAAA,CACJgB,MAAA,CAAOL,oBAAoB,EAC3BM,IAAA,CAAKL,2BAA2B;AACrC;AAAA,SAAArD,WAEUH,QAAA,EAAyBE,MAAA,EAAmC;EACpE,IAAM9C,KAAA,GAAQ0C,qBAAA,OAAAjC,UAAA,EAAgB8F,OAAA,CAAQ3D,QAAQ;EAC9C,IAAI5C,KAAA,KAAU,IAAI;IAChBiC,sBAAA,OAAArB,UAAA,EAAAsB,WAAA,EAAAP,IAAA,OAAgB7B,SAAA,CAAA4C,qBAAA,CAAU,MAAAnC,OAAA,GAAcP,KAAA,EAAO8C,MAAM,CAAC;IACtDb,sBAAA,OAAAhB,OAAA,EAAAmD,QAAA,EAAAzC,IAAA;EACF;AACF;AAAA,SAAAyC,SAAA,EAEgB;EAAA,IAAAsC,MAAA;EACdtH,aAAA,CAAciE,KAAA,CAAM,YAAM;IACxBqD,MAAA,CAAKlE,SAAA,CAAUG,OAAA,CAAQ,UAACgE,QAAA,EAAa;MACnCA,QAAA,CAAAjE,qBAAA,CAASgE,MAAA,EAAAnG,OAAA,CAAY;IACvB,CAAC;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}