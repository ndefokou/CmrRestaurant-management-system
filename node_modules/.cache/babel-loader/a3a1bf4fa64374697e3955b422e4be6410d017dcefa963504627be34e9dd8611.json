{"ast":null,"code":"// src/notifyManager.ts\nimport { scheduleMicrotask } from \"./utils.js\";\nfunction createNotifyManager() {\n  var queue = [];\n  var transactions = 0;\n  var notifyFn = function notifyFn(callback) {\n    callback();\n  };\n  var batchNotifyFn = function batchNotifyFn(callback) {\n    callback();\n  };\n  var batch = function batch(callback) {\n    var result;\n    transactions++;\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n      if (!transactions) {\n        flush();\n      }\n    }\n    return result;\n  };\n  var schedule = function schedule(callback) {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        notifyFn(callback);\n      });\n    }\n  };\n  var batchCalls = function batchCalls(callback) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n  var flush = function flush() {\n    var originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleMicrotask(function () {\n        batchNotifyFn(function () {\n          originalQueue.forEach(function (callback) {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  var setNotifyFunction = function setNotifyFunction(fn) {\n    notifyFn = fn;\n  };\n  var setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    batchNotifyFn = fn;\n  };\n  return {\n    batch: batch,\n    batchCalls: batchCalls,\n    schedule: schedule,\n    setNotifyFunction: setNotifyFunction,\n    setBatchNotifyFunction: setBatchNotifyFunction\n  };\n}\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"names":["scheduleMicrotask","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","batchCalls","_len","arguments","length","args","Array","_key","apply","originalQueue","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/query-core/src/notifyManager.ts"],"sourcesContent":["import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Array<unknown>>(\n    callback: BatchCallsCallback<T>,\n  ): BatchCallsCallback<T> => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"],"mappings":";AAAA,SAASA,iBAAA,QAAyB;AAY3B,SAASC,oBAAA,EAAsB;EACpC,IAAIC,KAAA,GAA+B,EAAC;EACpC,IAAIC,YAAA,GAAe;EACnB,IAAIC,QAAA,GAA2B,SAAAA,SAACC,QAAA,EAAa;IAC3CA,QAAA,CAAS;EACX;EACA,IAAIC,aAAA,GAAqC,SAAAA,cAACD,QAAA,EAAyB;IACjEA,QAAA,CAAS;EACX;EAEA,IAAME,KAAA,GAAQ,SAARA,MAAYF,QAAA,EAAyB;IACzC,IAAIG,MAAA;IACJL,YAAA;IACA,IAAI;MACFK,MAAA,GAASH,QAAA,CAAS;IACpB,UAAE;MACAF,YAAA;MACA,IAAI,CAACA,YAAA,EAAc;QACjBM,KAAA,CAAM;MACR;IACF;IACA,OAAOD,MAAA;EACT;EAEA,IAAME,QAAA,GAAW,SAAXA,SAAYL,QAAA,EAAmC;IACnD,IAAIF,YAAA,EAAc;MAChBD,KAAA,CAAMS,IAAA,CAAKN,QAAQ;IACrB,OAAO;MACLL,iBAAA,CAAkB,YAAM;QACtBI,QAAA,CAASC,QAAQ;MACnB,CAAC;IACH;EACF;EAKA,IAAMO,UAAA,GAAa,SAAbA,WACJP,QAAA,EAC0B;IAC1B,OAAO,YAAa;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MACTR,QAAA,CAAS,YAAM;QACbL,QAAA,CAAAc,KAAA,SAAYH,IAAI;MAClB,CAAC;IACH;EACF;EAEA,IAAMP,KAAA,GAAQ,SAARA,MAAA,EAAoB;IACxB,IAAMW,aAAA,GAAgBlB,KAAA;IACtBA,KAAA,GAAQ,EAAC;IACT,IAAIkB,aAAA,CAAcL,MAAA,EAAQ;MACxBf,iBAAA,CAAkB,YAAM;QACtBM,aAAA,CAAc,YAAM;UAClBc,aAAA,CAAcC,OAAA,CAAQ,UAAChB,QAAA,EAAa;YAClCD,QAAA,CAASC,QAAQ;UACnB,CAAC;QACH,CAAC;MACH,CAAC;IACH;EACF;EAMA,IAAMiB,iBAAA,GAAoB,SAApBA,kBAAqBC,EAAA,EAAuB;IAChDnB,QAAA,GAAWmB,EAAA;EACb;EAMA,IAAMC,sBAAA,GAAyB,SAAzBA,uBAA0BD,EAAA,EAA4B;IAC1DjB,aAAA,GAAgBiB,EAAA;EAClB;EAEA,OAAO;IACLhB,KAAA,EAAAA,KAAA;IACAK,UAAA,EAAAA,UAAA;IACAF,QAAA,EAAAA,QAAA;IACAY,iBAAA,EAAAA,iBAAA;IACAE,sBAAA,EAAAA;EACF;AACF;AAGO,IAAMC,aAAA,GAAgBxB,mBAAA,CAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}