{"ast":null,"code":"import _objectSpread from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectDestructuringEmpty from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nimport _classCallCheck from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _client, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, _executeFetch, _updateStaleTimeout, _computeRefetchInterval, _updateRefetchInterval, _updateTimers, _clearStaleTimeout, _clearRefetchInterval, _updateQuery, _notify;\n// src/queryObserver.ts\nimport { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { canFetch } from \"./retryer.js\";\nvar QueryObserver = (_client = /*#__PURE__*/new WeakMap(), _currentQuery = /*#__PURE__*/new WeakMap(), _currentQueryInitialState = /*#__PURE__*/new WeakMap(), _currentResult = /*#__PURE__*/new WeakMap(), _currentResultState = /*#__PURE__*/new WeakMap(), _currentResultOptions = /*#__PURE__*/new WeakMap(), _selectError = /*#__PURE__*/new WeakMap(), _selectFn = /*#__PURE__*/new WeakMap(), _selectResult = /*#__PURE__*/new WeakMap(), _lastQueryWithDefinedData = /*#__PURE__*/new WeakMap(), _staleTimeoutId = /*#__PURE__*/new WeakMap(), _refetchIntervalId = /*#__PURE__*/new WeakMap(), _currentRefetchInterval = /*#__PURE__*/new WeakMap(), _trackedProps = /*#__PURE__*/new WeakMap(), _executeFetch = /*#__PURE__*/new WeakSet(), _updateStaleTimeout = /*#__PURE__*/new WeakSet(), _computeRefetchInterval = /*#__PURE__*/new WeakSet(), _updateRefetchInterval = /*#__PURE__*/new WeakSet(), _updateTimers = /*#__PURE__*/new WeakSet(), _clearStaleTimeout = /*#__PURE__*/new WeakSet(), _clearRefetchInterval = /*#__PURE__*/new WeakSet(), _updateQuery = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryObserver, _Subscribable);\n  var _super = _createSuper(QueryObserver);\n  function QueryObserver(client, options) {\n    var _this;\n    _classCallCheck(this, QueryObserver);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _notify);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateQuery);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _clearRefetchInterval);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _clearStaleTimeout);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateTimers);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateRefetchInterval);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _computeRefetchInterval);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateStaleTimeout);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _executeFetch);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _client, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentQuery, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentQueryInitialState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResult, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResultState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _selectError, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _selectFn, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _selectResult, {\n      writable: true,\n      value: void 0\n    });\n    // This property keeps track of the last query with defined data.\n    // It will be used to pass the previous data and query to the placeholder function between renders.\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _lastQueryWithDefinedData, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _staleTimeoutId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _refetchIntervalId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentRefetchInterval, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _trackedProps, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _currentQuery, void 0);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _currentQueryInitialState, void 0);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _currentResult, void 0);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _trackedProps, /* @__PURE__ */new Set());\n    _classPrivateFieldSet(_assertThisInitialized(_this), _client, client);\n    _this.options = options;\n    _classPrivateFieldSet(_assertThisInitialized(_this), _selectError, null);\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(this, _currentQuery).addObserver(this);\n        if (shouldFetchOnMount(_classPrivateFieldGet(this, _currentQuery), this.options)) {\n          _classPrivateMethodGet(this, _executeFetch, _executeFetch2).call(this);\n        }\n        _classPrivateMethodGet(this, _updateTimers, _updateTimers2).call(this);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(_classPrivateFieldGet(this, _currentQuery), this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(_classPrivateFieldGet(this, _currentQuery), this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n      _classPrivateMethodGet(this, _clearStaleTimeout, _clearStaleTimeout2).call(this);\n      _classPrivateMethodGet(this, _clearRefetchInterval, _clearRefetchInterval2).call(this);\n      _classPrivateFieldGet(this, _currentQuery).removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      var prevOptions = this.options;\n      var prevQuery = _classPrivateFieldGet(this, _currentQuery);\n      this.options = _classPrivateFieldGet(this, _client).defaultQueryOptions(options);\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        _classPrivateFieldGet(this, _client).getQueryCache().notify({\n          type: \"observerOptionsUpdated\",\n          query: _classPrivateFieldGet(this, _currentQuery),\n          observer: this\n        });\n      }\n      if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n        throw new Error(\"Expected enabled to be a boolean\");\n      }\n      if (!this.options.queryKey) {\n        this.options.queryKey = prevOptions.queryKey;\n      }\n      _classPrivateMethodGet(this, _updateQuery, _updateQuery2).call(this);\n      var mounted = this.hasListeners();\n      if (mounted && shouldFetchOptionally(_classPrivateFieldGet(this, _currentQuery), prevQuery, this.options, prevOptions)) {\n        _classPrivateMethodGet(this, _executeFetch, _executeFetch2).call(this);\n      }\n      this.updateResult(notifyOptions);\n      if (mounted && (_classPrivateFieldGet(this, _currentQuery) !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n        _classPrivateMethodGet(this, _updateStaleTimeout, _updateStaleTimeout2).call(this);\n      }\n      var nextRefetchInterval = _classPrivateMethodGet(this, _computeRefetchInterval, _computeRefetchInterval2).call(this);\n      if (mounted && (_classPrivateFieldGet(this, _currentQuery) !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== _classPrivateFieldGet(this, _currentRefetchInterval))) {\n        _classPrivateMethodGet(this, _updateRefetchInterval, _updateRefetchInterval2).call(this, nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = _classPrivateFieldGet(this, _client).getQueryCache().build(_classPrivateFieldGet(this, _client), options);\n      var result = this.createResult(query, options);\n      if (shouldAssignObserverCurrentProperties(this, result)) {\n        _classPrivateFieldSet(this, _currentResult, result);\n        _classPrivateFieldSet(this, _currentResultOptions, this.options);\n        _classPrivateFieldSet(this, _currentResultState, _classPrivateFieldGet(this, _currentQuery).state);\n      }\n      return result;\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(this, _currentResult);\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result) {\n      var _this2 = this;\n      var trackedResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(trackedResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            _classPrivateFieldGet(_this2, _trackedProps).add(key);\n            return result[key];\n          }\n        });\n      });\n      return trackedResult;\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return _classPrivateFieldGet(this, _currentQuery);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        options = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n      return this.fetch(_objectSpread({}, options));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n      var defaultedOptions = _classPrivateFieldGet(this, _client).defaultQueryOptions(options);\n      var query = _classPrivateFieldGet(this, _client).getQueryCache().build(_classPrivateFieldGet(this, _client), defaultedOptions);\n      query.isFetchingOptimistic = true;\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _fetchOptions$cancelR,\n        _this4 = this;\n      return _classPrivateMethodGet(this, _executeFetch, _executeFetch2).call(this, _objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) !== null && _fetchOptions$cancelR !== void 0 ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n        return _classPrivateFieldGet(_this4, _currentResult);\n      });\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var prevQuery = _classPrivateFieldGet(this, _currentQuery);\n      var prevOptions = this.options;\n      var prevResult = _classPrivateFieldGet(this, _currentResult);\n      var prevResultState = _classPrivateFieldGet(this, _currentResultState);\n      var prevResultOptions = _classPrivateFieldGet(this, _currentResultOptions);\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : _classPrivateFieldGet(this, _currentQueryInitialState);\n      var state = query.state;\n      var error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        fetchStatus = state.fetchStatus,\n        status = state.status;\n      var isPlaceholderData = false;\n      var data;\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n        if (fetchOnMount || fetchOptionally) {\n          fetchStatus = canFetch(query.options.networkMode) ? \"fetching\" : \"paused\";\n          if (!state.dataUpdatedAt) {\n            status = \"pending\";\n          }\n        }\n        if (options._optimisticResults === \"isRestoring\") {\n          fetchStatus = \"idle\";\n        }\n      }\n      if (options.select && typeof state.data !== \"undefined\") {\n        if (prevResult && state.data === (prevResultState === null || prevResultState === void 0 ? void 0 : prevResultState.data) && options.select === _classPrivateFieldGet(this, _selectFn)) {\n          data = _classPrivateFieldGet(this, _selectResult);\n        } else {\n          try {\n            _classPrivateFieldSet(this, _selectFn, options.select);\n            data = options.select(state.data);\n            data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, data, options);\n            _classPrivateFieldSet(this, _selectResult, data);\n            _classPrivateFieldSet(this, _selectError, null);\n          } catch (selectError) {\n            _classPrivateFieldSet(this, _selectError, selectError);\n          }\n        }\n      } else {\n        data = state.data;\n      }\n      if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"pending\") {\n        var placeholderData;\n        if (prevResult !== null && prevResult !== void 0 && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions === null || prevResultOptions === void 0 ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n        } else {\n          var _classPrivateFieldGet2;\n          placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _lastQueryWithDefinedData)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.state.data, _classPrivateFieldGet(this, _lastQueryWithDefinedData)) : options.placeholderData;\n          if (options.select && typeof placeholderData !== \"undefined\") {\n            try {\n              placeholderData = options.select(placeholderData);\n              _classPrivateFieldSet(this, _selectError, null);\n            } catch (selectError) {\n              _classPrivateFieldSet(this, _selectError, selectError);\n            }\n          }\n        }\n        if (typeof placeholderData !== \"undefined\") {\n          status = \"success\";\n          data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, placeholderData, options);\n          isPlaceholderData = true;\n        }\n      }\n      if (_classPrivateFieldGet(this, _selectError)) {\n        error = _classPrivateFieldGet(this, _selectError);\n        data = _classPrivateFieldGet(this, _selectResult);\n        errorUpdatedAt = Date.now();\n        status = \"error\";\n      }\n      var isFetching = fetchStatus === \"fetching\";\n      var isPending = status === \"pending\";\n      var isError = status === \"error\";\n      var isLoading = isPending && isFetching;\n      var result = {\n        status: status,\n        fetchStatus: fetchStatus,\n        isPending: isPending,\n        isSuccess: status === \"success\",\n        isError: isError,\n        isInitialLoading: isLoading,\n        isLoading: isLoading,\n        data: data,\n        dataUpdatedAt: state.dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: state.fetchFailureCount,\n        failureReason: state.fetchFailureReason,\n        errorUpdateCount: state.errorUpdateCount,\n        isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n        isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && !isPending,\n        isLoadingError: isError && state.dataUpdatedAt === 0,\n        isPaused: fetchStatus === \"paused\",\n        isPlaceholderData: isPlaceholderData,\n        isRefetchError: isError && state.dataUpdatedAt !== 0,\n        isStale: isStale(query, options),\n        refetch: this.refetch\n      };\n      return result;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult(notifyOptions) {\n      var _this5 = this;\n      var prevResult = _classPrivateFieldGet(this, _currentResult);\n      var nextResult = this.createResult(_classPrivateFieldGet(this, _currentQuery), this.options);\n      _classPrivateFieldSet(this, _currentResultState, _classPrivateFieldGet(this, _currentQuery).state);\n      _classPrivateFieldSet(this, _currentResultOptions, this.options);\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n      if (_classPrivateFieldGet(this, _currentResultState).data !== void 0) {\n        _classPrivateFieldSet(this, _lastQueryWithDefinedData, _classPrivateFieldGet(this, _currentQuery));\n      }\n      _classPrivateFieldSet(this, _currentResult, nextResult);\n      var defaultNotifyOptions = {};\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n        var notifyOnChangeProps = _this5.options.notifyOnChangeProps;\n        var notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n        if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !_classPrivateFieldGet(_this5, _trackedProps).size) {\n          return true;\n        }\n        var includedProps = new Set(notifyOnChangePropsValue !== null && notifyOnChangePropsValue !== void 0 ? notifyOnChangePropsValue : _classPrivateFieldGet(_this5, _trackedProps));\n        if (_this5.options.throwOnError) {\n          includedProps.add(\"error\");\n        }\n        return Object.keys(_classPrivateFieldGet(_this5, _currentResult)).some(function (key) {\n          var typedKey = key;\n          var changed = _classPrivateFieldGet(_this5, _currentResult)[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n      if ((notifyOptions === null || notifyOptions === void 0 ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n        defaultNotifyOptions.listeners = true;\n      }\n      _classPrivateMethodGet(this, _notify, _notify2).call(this, _objectSpread(_objectSpread({}, defaultNotifyOptions), notifyOptions));\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate() {\n      this.updateResult();\n      if (this.hasListeners()) {\n        _classPrivateMethodGet(this, _updateTimers, _updateTimers2).call(this);\n      }\n    }\n  }]);\n  return QueryObserver;\n}(Subscribable));\nfunction _executeFetch2(fetchOptions) {\n  _classPrivateMethodGet(this, _updateQuery, _updateQuery2).call(this);\n  var promise = _classPrivateFieldGet(this, _currentQuery).fetch(this.options, fetchOptions);\n  if (!(fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.throwOnError)) {\n    promise = promise.catch(noop);\n  }\n  return promise;\n}\nfunction _updateStaleTimeout2() {\n  var _this6 = this;\n  _classPrivateMethodGet(this, _clearStaleTimeout, _clearStaleTimeout2).call(this);\n  if (isServer || _classPrivateFieldGet(this, _currentResult).isStale || !isValidTimeout(this.options.staleTime)) {\n    return;\n  }\n  var time = timeUntilStale(_classPrivateFieldGet(this, _currentResult).dataUpdatedAt, this.options.staleTime);\n  var timeout = time + 1;\n  _classPrivateFieldSet(this, _staleTimeoutId, setTimeout(function () {\n    if (!_classPrivateFieldGet(_this6, _currentResult).isStale) {\n      _this6.updateResult();\n    }\n  }, timeout));\n}\nfunction _computeRefetchInterval2() {\n  var _ref2;\n  return (_ref2 = typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(_classPrivateFieldGet(this, _currentQuery)) : this.options.refetchInterval) !== null && _ref2 !== void 0 ? _ref2 : false;\n}\nfunction _updateRefetchInterval2(nextInterval) {\n  var _this7 = this;\n  _classPrivateMethodGet(this, _clearRefetchInterval, _clearRefetchInterval2).call(this);\n  _classPrivateFieldSet(this, _currentRefetchInterval, nextInterval);\n  if (isServer || this.options.enabled === false || !isValidTimeout(_classPrivateFieldGet(this, _currentRefetchInterval)) || _classPrivateFieldGet(this, _currentRefetchInterval) === 0) {\n    return;\n  }\n  _classPrivateFieldSet(this, _refetchIntervalId, setInterval(function () {\n    if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n      _classPrivateMethodGet(_this7, _executeFetch, _executeFetch2).call(_this7);\n    }\n  }, _classPrivateFieldGet(this, _currentRefetchInterval)));\n}\nfunction _updateTimers2() {\n  _classPrivateMethodGet(this, _updateStaleTimeout, _updateStaleTimeout2).call(this);\n  _classPrivateMethodGet(this, _updateRefetchInterval, _updateRefetchInterval2).call(this, _classPrivateMethodGet(this, _computeRefetchInterval, _computeRefetchInterval2).call(this));\n}\nfunction _clearStaleTimeout2() {\n  if (_classPrivateFieldGet(this, _staleTimeoutId)) {\n    clearTimeout(_classPrivateFieldGet(this, _staleTimeoutId));\n    _classPrivateFieldSet(this, _staleTimeoutId, void 0);\n  }\n}\nfunction _clearRefetchInterval2() {\n  if (_classPrivateFieldGet(this, _refetchIntervalId)) {\n    clearInterval(_classPrivateFieldGet(this, _refetchIntervalId));\n    _classPrivateFieldSet(this, _refetchIntervalId, void 0);\n  }\n}\nfunction _updateQuery2() {\n  var query = _classPrivateFieldGet(this, _client).getQueryCache().build(_classPrivateFieldGet(this, _client), this.options);\n  if (query === _classPrivateFieldGet(this, _currentQuery)) {\n    return;\n  }\n  var prevQuery = _classPrivateFieldGet(this, _currentQuery);\n  _classPrivateFieldSet(this, _currentQuery, query);\n  _classPrivateFieldSet(this, _currentQueryInitialState, query.state);\n  if (this.hasListeners()) {\n    prevQuery === null || prevQuery === void 0 ? void 0 : prevQuery.removeObserver(this);\n    query.addObserver(this);\n  }\n}\nfunction _notify2(notifyOptions) {\n  var _this8 = this;\n  notifyManager.batch(function () {\n    if (notifyOptions.listeners) {\n      _this8.listeners.forEach(function (listener) {\n        listener(_classPrivateFieldGet(_this8, _currentResult));\n      });\n    }\n    _classPrivateFieldGet(_this8, _client).getQueryCache().notify({\n      query: _classPrivateFieldGet(_this8, _currentQuery),\n      type: \"observerResultsUpdated\"\n    });\n  });\n}\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    var value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["isServer","isValidTimeout","noop","replaceData","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","canFetch","QueryObserver","_client","WeakMap","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","_executeFetch","WeakSet","_updateStaleTimeout","_computeRefetchInterval","_updateRefetchInterval","_updateTimers","_clearStaleTimeout","_clearRefetchInterval","_updateQuery","_notify","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","Set","bindMethods","setOptions","_createClass","key","refetch","bind","onSubscribe","listeners","size","_classPrivateFieldGet","addObserver","shouldFetchOnMount","_classPrivateMethodGet","_executeFetch2","_updateTimers2","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout2","_clearRefetchInterval2","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","_updateQuery2","mounted","shouldFetchOptionally","updateResult","staleTime","_updateStaleTimeout2","nextRefetchInterval","_computeRefetchInterval2","_updateRefetchInterval2","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","_this2","trackedResult","Object","keys","forEach","defineProperty","configurable","enumerable","get","add","getCurrentQuery","_ref","arguments","length","undefined","assign","_objectDestructuringEmpty","fetch","_objectSpread","fetchOptimistic","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","error","errorUpdatedAt","fetchStatus","status","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","networkMode","dataUpdatedAt","select","selectError","placeholderData","_classPrivateFieldGet2","Date","now","isFetching","isPending","isError","isLoading","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","_this5","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","throwOnError","some","typedKey","changed","has","_notify2","onQueryUpdate","promise","catch","_this6","time","timeout","setTimeout","_ref2","refetchInterval","nextInterval","_this7","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","_this8","batch","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","suspense","isStaleByTime","optimisticResult"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch } from './retryer'\nimport type { QueryClient } from './queryClient'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps: Set<keyof QueryObserverResult> = new Set()\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.options = options\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.#updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.#currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let { error, errorUpdatedAt, fetchStatus, status } = state\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!state.dataUpdatedAt) {\n          status = 'pending'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Select data if needed\n    if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}