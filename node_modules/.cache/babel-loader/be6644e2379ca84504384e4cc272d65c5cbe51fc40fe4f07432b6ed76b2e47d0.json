{"ast":null,"code":"import _objectSpread from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// src/infiniteQueryObserver.ts\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { hasNextPage, hasPreviousPage, infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar InfiniteQueryObserver = /*#__PURE__*/function (_QueryObserver) {\n  _inherits(InfiniteQueryObserver, _QueryObserver);\n  var _super = _createSuper(InfiniteQueryObserver);\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  function InfiniteQueryObserver(client, options) {\n    _classCallCheck(this, InfiniteQueryObserver);\n    return _super.call(this, client, options);\n  }\n  _createClass(InfiniteQueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"bindMethods\", this).call(this);\n      this.fetchNextPage = this.fetchNextPage.bind(this);\n      this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"setOptions\", this).call(this, _objectSpread(_objectSpread({}, options), {}, {\n        behavior: infiniteQueryBehavior()\n      }), notifyOptions);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      options.behavior = infiniteQueryBehavior();\n      return _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"getOptimisticResult\", this).call(this, options);\n    }\n  }, {\n    key: \"fetchNextPage\",\n    value: function fetchNextPage(options) {\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          fetchMore: {\n            direction: \"forward\"\n          }\n        }\n      }));\n    }\n  }, {\n    key: \"fetchPreviousPage\",\n    value: function fetchPreviousPage(options) {\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          fetchMore: {\n            direction: \"backward\"\n          }\n        }\n      }));\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var _state$fetchMeta, _state$fetchMeta2;\n      var state = query.state;\n      var result = _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"createResult\", this).call(this, query, options);\n      var isFetching = result.isFetching,\n        isRefetching = result.isRefetching;\n      var isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) === null || _state$fetchMeta === void 0 || (_state$fetchMeta = _state$fetchMeta.fetchMore) === null || _state$fetchMeta === void 0 ? void 0 : _state$fetchMeta.direction) === \"forward\";\n      var isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) === null || _state$fetchMeta2 === void 0 || (_state$fetchMeta2 = _state$fetchMeta2.fetchMore) === null || _state$fetchMeta2 === void 0 ? void 0 : _state$fetchMeta2.direction) === \"backward\";\n      return _objectSpread(_objectSpread({}, result), {}, {\n        fetchNextPage: this.fetchNextPage,\n        fetchPreviousPage: this.fetchPreviousPage,\n        hasNextPage: hasNextPage(options, state.data),\n        hasPreviousPage: hasPreviousPage(options, state.data),\n        isFetchingNextPage: isFetchingNextPage,\n        isFetchingPreviousPage: isFetchingPreviousPage,\n        isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n      });\n    }\n  }]);\n  return InfiniteQueryObserver;\n}(QueryObserver);\nexport { InfiniteQueryObserver };","map":{"version":3,"names":["QueryObserver","hasNextPage","hasPreviousPage","infiniteQueryBehavior","InfiniteQueryObserver","_QueryObserver","_inherits","_super","_createSuper","client","options","_classCallCheck","call","_createClass","key","value","bindMethods","_get","_getPrototypeOf","prototype","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","_objectSpread","behavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","query","_state$fetchMeta","_state$fetchMeta2","state","result","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","data"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}