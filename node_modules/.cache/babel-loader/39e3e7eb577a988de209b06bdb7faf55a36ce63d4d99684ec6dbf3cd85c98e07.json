{"ast":null,"code":"import _objectSpread from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateMethodGet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldSet from \"/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _initialState, _revertState, _cache, _promise, _retryer, _observers, _defaultOptions, _abortSignalConsumed, _setOptions, _dispatch;\n// src/query.ts\nimport { noop, replaceData, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = (_initialState = /*#__PURE__*/new WeakMap(), _revertState = /*#__PURE__*/new WeakMap(), _cache = /*#__PURE__*/new WeakMap(), _promise = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _abortSignalConsumed = /*#__PURE__*/new WeakMap(), _setOptions = /*#__PURE__*/new WeakSet(), _dispatch = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Removable) {\n  _inherits(Query, _Removable);\n  var _super = _createSuper(Query);\n  function Query(config) {\n    var _this;\n    _classCallCheck(this, Query);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _dispatch);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _setOptions);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _initialState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _revertState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _cache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _promise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _retryer, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _observers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _defaultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _abortSignalConsumed, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _abortSignalConsumed, false);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _defaultOptions, config.defaultOptions);\n    _classPrivateMethodGet(_assertThisInitialized(_this), _setOptions, _setOptions2).call(_assertThisInitialized(_this), config.options);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _observers, []);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _cache, config.cache);\n    _this.queryKey = config.queryKey;\n    _this.queryHash = config.queryHash;\n    _classPrivateFieldSet(_assertThisInitialized(_this), _initialState, config.state || getDefaultState(_this.options));\n    _this.state = _classPrivateFieldGet(_assertThisInitialized(_this), _initialState);\n    _this.scheduleGc();\n    return _this;\n  }\n  _createClass(Query, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!_classPrivateFieldGet(this, _observers).length && this.state.fetchStatus === \"idle\") {\n        _classPrivateFieldGet(this, _cache).remove(this);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newData, options) {\n      var data = replaceData(this.state.data, newData, this.options);\n      _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n        data: data,\n        type: \"success\",\n        dataUpdatedAt: options === null || options === void 0 ? void 0 : options.updatedAt,\n        manual: options === null || options === void 0 ? void 0 : options.manual\n      });\n      return data;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state, setStateOptions) {\n      _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n        type: \"setState\",\n        state: state,\n        setStateOptions: setStateOptions\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(options) {\n      var _classPrivateFieldGet2;\n      var promise = _classPrivateFieldGet(this, _promise);\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.cancel(options);\n      return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(Query.prototype), \"destroy\", this).call(this);\n      this.cancel({\n        silent: true\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.destroy();\n      this.setState(_classPrivateFieldGet(this, _initialState));\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return _classPrivateFieldGet(this, _observers).some(function (observer) {\n        return observer.options.enabled !== false;\n      });\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return this.getObserversCount() > 0 && !this.isActive();\n    }\n  }, {\n    key: \"isStale\",\n    value: function isStale() {\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || _classPrivateFieldGet(this, _observers).some(function (observer) {\n        return observer.getCurrentResult().isStale;\n      });\n    }\n  }, {\n    key: \"isStaleByTime\",\n    value: function isStaleByTime() {\n      var staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _classPrivateFieldGet3;\n      var observer = _classPrivateFieldGet(this, _observers).find(function (x) {\n        return x.shouldFetchOnWindowFocus();\n      });\n      observer === null || observer === void 0 ? void 0 : observer.refetch({\n        cancelRefetch: false\n      });\n      (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.continue();\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _classPrivateFieldGet4;\n      var observer = _classPrivateFieldGet(this, _observers).find(function (x) {\n        return x.shouldFetchOnReconnect();\n      });\n      observer === null || observer === void 0 ? void 0 : observer.refetch({\n        cancelRefetch: false\n      });\n      (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.continue();\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!_classPrivateFieldGet(this, _observers).includes(observer)) {\n        _classPrivateFieldGet(this, _observers).push(observer);\n        this.clearGcTimeout();\n        _classPrivateFieldGet(this, _cache).notify({\n          type: \"observerAdded\",\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      if (_classPrivateFieldGet(this, _observers).includes(observer)) {\n        _classPrivateFieldSet(this, _observers, _classPrivateFieldGet(this, _observers).filter(function (x) {\n          return x !== observer;\n        }));\n        if (!_classPrivateFieldGet(this, _observers).length) {\n          if (_classPrivateFieldGet(this, _retryer)) {\n            if (_classPrivateFieldGet(this, _abortSignalConsumed)) {\n              _classPrivateFieldGet(this, _retryer).cancel({\n                revert: true\n              });\n            } else {\n              _classPrivateFieldGet(this, _retryer).cancelRetry();\n            }\n          }\n          this.scheduleGc();\n        }\n        _classPrivateFieldGet(this, _cache).notify({\n          type: \"observerRemoved\",\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"getObserversCount\",\n    value: function getObserversCount() {\n      return _classPrivateFieldGet(this, _observers).length;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!this.state.isInvalidated) {\n        _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n          type: \"invalidate\"\n        });\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(options, fetchOptions) {\n      var _this2 = this,\n        _this$options$behavio,\n        _context$fetchOptions;\n      if (this.state.fetchStatus !== \"idle\") {\n        if (this.state.dataUpdatedAt && fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.cancelRefetch) {\n          this.cancel({\n            silent: true\n          });\n        } else if (_classPrivateFieldGet(this, _promise)) {\n          var _classPrivateFieldGet5;\n          (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.continueRetry();\n          return _classPrivateFieldGet(this, _promise);\n        }\n      }\n      if (options) {\n        _classPrivateMethodGet(this, _setOptions, _setOptions2).call(this, options);\n      }\n      if (!this.options.queryFn) {\n        var observer = _classPrivateFieldGet(this, _observers).find(function (x) {\n          return x.options.queryFn;\n        });\n        if (observer) {\n          _classPrivateMethodGet(this, _setOptions, _setOptions2).call(this, observer.options);\n        }\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (!Array.isArray(this.options.queryKey)) {\n          console.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n        }\n      }\n      var abortController = new AbortController();\n      var queryFnContext = {\n        queryKey: this.queryKey,\n        meta: this.meta\n      };\n      var addSignalProperty = function addSignalProperty(object) {\n        Object.defineProperty(object, \"signal\", {\n          enumerable: true,\n          get: function get() {\n            _classPrivateFieldSet(_this2, _abortSignalConsumed, true);\n            return abortController.signal;\n          }\n        });\n      };\n      addSignalProperty(queryFnContext);\n      var fetchFn = function fetchFn() {\n        if (!_this2.options.queryFn) {\n          return Promise.reject(new Error(\"Missing queryFn: '\".concat(_this2.options.queryHash, \"'\")));\n        }\n        _classPrivateFieldSet(_this2, _abortSignalConsumed, false);\n        if (_this2.options.persister) {\n          return _this2.options.persister(_this2.options.queryFn, queryFnContext, _this2);\n        }\n        return _this2.options.queryFn(queryFnContext);\n      };\n      var context = {\n        fetchOptions: fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        state: this.state,\n        fetchFn: fetchFn\n      };\n      addSignalProperty(context);\n      (_this$options$behavio = this.options.behavior) === null || _this$options$behavio === void 0 ? void 0 : _this$options$behavio.onFetch(context, this);\n      _classPrivateFieldSet(this, _revertState, this.state);\n      if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) === null || _context$fetchOptions === void 0 ? void 0 : _context$fetchOptions.meta)) {\n        var _context$fetchOptions2;\n        _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n          type: \"fetch\",\n          meta: (_context$fetchOptions2 = context.fetchOptions) === null || _context$fetchOptions2 === void 0 ? void 0 : _context$fetchOptions2.meta\n        });\n      }\n      var onError = function onError(error) {\n        if (!(isCancelledError(error) && error.silent)) {\n          _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n            type: \"error\",\n            error: error\n          });\n        }\n        if (!isCancelledError(error)) {\n          var _classPrivateFieldGet6, _classPrivateFieldGet7, _classPrivateFieldGet8, _classPrivateFieldGet9;\n          (_classPrivateFieldGet6 = (_classPrivateFieldGet7 = _classPrivateFieldGet(_this2, _cache).config).onError) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.call(_classPrivateFieldGet7, error, _this2);\n          (_classPrivateFieldGet8 = (_classPrivateFieldGet9 = _classPrivateFieldGet(_this2, _cache).config).onSettled) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.call(_classPrivateFieldGet9, _this2.state.data, error, _this2);\n        }\n        if (!_this2.isFetchingOptimistic) {\n          _this2.scheduleGc();\n        }\n        _this2.isFetchingOptimistic = false;\n      };\n      _classPrivateFieldSet(this, _retryer, createRetryer({\n        fn: context.fetchFn,\n        abort: abortController.abort.bind(abortController),\n        onSuccess: function onSuccess(data) {\n          var _classPrivateFieldGet10, _classPrivateFieldGet11, _classPrivateFieldGet12, _classPrivateFieldGet13;\n          if (typeof data === \"undefined\") {\n            if (process.env.NODE_ENV !== \"production\") {\n              console.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \".concat(_this2.queryHash));\n            }\n            onError(new Error(\"\".concat(_this2.queryHash, \" data is undefined\")));\n            return;\n          }\n          _this2.setData(data);\n          (_classPrivateFieldGet10 = (_classPrivateFieldGet11 = _classPrivateFieldGet(_this2, _cache).config).onSuccess) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.call(_classPrivateFieldGet11, data, _this2);\n          (_classPrivateFieldGet12 = (_classPrivateFieldGet13 = _classPrivateFieldGet(_this2, _cache).config).onSettled) === null || _classPrivateFieldGet12 === void 0 ? void 0 : _classPrivateFieldGet12.call(_classPrivateFieldGet13, data, _this2.state.error, _this2);\n          if (!_this2.isFetchingOptimistic) {\n            _this2.scheduleGc();\n          }\n          _this2.isFetchingOptimistic = false;\n        },\n        onError: onError,\n        onFail: function onFail(failureCount, error) {\n          _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n            type: \"failed\",\n            failureCount: failureCount,\n            error: error\n          });\n        },\n        onPause: function onPause() {\n          _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n            type: \"pause\"\n          });\n        },\n        onContinue: function onContinue() {\n          _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n            type: \"continue\"\n          });\n        },\n        retry: context.options.retry,\n        retryDelay: context.options.retryDelay,\n        networkMode: context.options.networkMode\n      }));\n      _classPrivateFieldSet(this, _promise, _classPrivateFieldGet(this, _retryer).promise);\n      return _classPrivateFieldGet(this, _promise);\n    }\n  }]);\n  return Query;\n}(Removable));\nfunction _setOptions2(options) {\n  this.options = _objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions)), options);\n  this.updateGcTime(this.options.gcTime);\n}\nfunction _dispatch2(action) {\n  var _this3 = this;\n  var reducer = function reducer(state) {\n    var _action$meta, _action$dataUpdatedAt;\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchFailureCount: action.failureCount,\n          fetchFailureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"paused\"\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"fetching\"\n        });\n      case \"fetch\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchFailureCount: 0,\n          fetchFailureReason: null,\n          fetchMeta: (_action$meta = action.meta) !== null && _action$meta !== void 0 ? _action$meta : null,\n          fetchStatus: canFetch(_this3.options.networkMode) ? \"fetching\" : \"paused\"\n        }, !state.dataUpdatedAt && {\n          error: null,\n          status: \"pending\"\n        });\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) !== null && _action$dataUpdatedAt !== void 0 ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          isInvalidated: false,\n          status: \"success\"\n        }, !action.manual && {\n          fetchStatus: \"idle\",\n          fetchFailureCount: 0,\n          fetchFailureReason: null\n        });\n      case \"error\":\n        var error = action.error;\n        if (isCancelledError(error) && error.revert && _classPrivateFieldGet(_this3, _revertState)) {\n          return _objectSpread(_objectSpread({}, _classPrivateFieldGet(_this3, _revertState)), {}, {\n            fetchStatus: \"idle\"\n          });\n        }\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          fetchFailureReason: error,\n          fetchStatus: \"idle\",\n          status: \"error\"\n        });\n      case \"invalidate\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isInvalidated: true\n        });\n      case \"setState\":\n        return _objectSpread(_objectSpread({}, state), action.state);\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(function () {\n    _classPrivateFieldGet(_this3, _observers).forEach(function (observer) {\n      observer.onQueryUpdate();\n    });\n    _classPrivateFieldGet(_this3, _cache).notify({\n      query: _this3,\n      type: \"updated\",\n      action: action\n    });\n  });\n}\nfunction getDefaultState(options) {\n  var data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  var hasData = typeof data !== \"undefined\";\n  var initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data: data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt !== null && initialDataUpdatedAt !== void 0 ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport { Query };","map":{"version":3,"names":["noop","replaceData","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","_initialState","WeakMap","_revertState","_cache","_promise","_retryer","_observers","_defaultOptions","_abortSignalConsumed","_setOptions","WeakSet","_dispatch","_Removable","_inherits","_super","_createSuper","config","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","defaultOptions","_classPrivateMethodGet","_setOptions2","options","cache","queryKey","queryHash","state","getDefaultState","_classPrivateFieldGet","scheduleGc","_createClass","key","get","meta","optionalRemove","length","fetchStatus","remove","setData","newData","data","_dispatch2","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","_classPrivateFieldGet2","promise","then","catch","Promise","resolve","destroy","_get","_getPrototypeOf","prototype","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","arguments","undefined","onFocus","_classPrivateFieldGet3","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","_classPrivateFieldGet4","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","_this2","_this$options$behavio","_context$fetchOptions","_classPrivateFieldGet5","continueRetry","queryFn","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","queryFnContext","addSignalProperty","object","Object","defineProperty","enumerable","signal","fetchFn","reject","Error","concat","persister","context","behavior","onFetch","fetchMeta","_context$fetchOptions2","onError","_classPrivateFieldGet6","_classPrivateFieldGet7","_classPrivateFieldGet8","_classPrivateFieldGet9","onSettled","isFetchingOptimistic","fn","abort","bind","onSuccess","_classPrivateFieldGet10","_classPrivateFieldGet11","_classPrivateFieldGet12","_classPrivateFieldGet13","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","_objectSpread","updateGcTime","gcTime","action","_this3","reducer","_action$meta","_action$dataUpdatedAt","fetchFailureCount","fetchFailureReason","status","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["/home/arthur/Documents/CmrRestaurant-management-system/node_modules/@tanstack/query-core/src/query.ts"],"sourcesContent":["import { noop, replaceData, timeUntilStale } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #promise?: Promise<TData>\n  #retryer?: Retryer<TData>\n  #observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.#setOptions(config.options)\n    this.#observers = []\n    this.#cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = config.state || getDefaultState(this.options)\n    this.state = this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  #setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.#observers.some(\n      (observer) => observer.options.enabled !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.#observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.#observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.#observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.#observers.includes(observer)) {\n      this.#observers = this.#observers.filter((x) => x !== observer)\n\n      if (!this.#observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.#observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.#promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.#setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.#observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.#setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Create query function context\n    const queryFnContext: Omit<QueryFunctionContext<TQueryKey>, 'signal'> = {\n      queryKey: this.queryKey,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject(\n          new Error(`Missing queryFn: '${this.options.queryHash}'`),\n        )\n      }\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          this.options.queryFn,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return this.options.queryFn(\n        queryFnContext as QueryFunctionContext<TQueryKey>,\n      )\n    }\n\n    // Trigger behavior hook\n    const context: Omit<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        this.setData(data)\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.#promise = this.#retryer.promise\n\n    return this.#promise\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'pending',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}